{:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 ;:secrets #include "secrets.edn" ;; externalised and usually "mounted" as a docker/kubernetes secret
 :components
 {; the print services can be comment out. Just useful for testing.
  :print-modular-env {:start (println "modular environment: " #ref [:modular])}
  :config {:start (modular.config/load-config! (:config #ref [:modular]))}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (deref (clip/ref :config))))}
  
  ; goldly service returns {:ns-clj :webly           ; this are used to start clj-require and webly
  ;                         :ws-watch :cljs-watch}   ; this is used when stopping goldly
  :goldly {:start (goldly.app.run/start-goldly
                    (deref (clip/ref :config))
                    (:profile #ref [:modular]))
            :stop (goldly.app.run/stop-goldly this)}

  ;:print-goldly-env {:start (println "goldly environment: " (clip/ref :goldly))}
  ;:print-goldly-webly-config {:start (println "webly (dynamic config): " (:webly (clip/ref :goldly)))}
  ;:print-goldly-ns-clj-config {:start (println "ns-clj (dynamic config): " (:ns-clj (clip/ref :goldly)))}

  ; load the :ns-clj defined by the user [demo.service]
  :ns-require {:start (modular.require/require-namespaces
                      (:ns-clj (deref (clip/ref :config))))}

  ; goldly extension clj-ns-loader is requiring already
  ;:ns-require {:start (modular.require/require-namespaces
                        ;(:ns-clj (clip/ref :goldly)))}
  
  :webly {:start (webly.app.app/start-webly
                  (:webly (clip/ref :goldly)) ; use webly config generated by goldly.
                  (:profile #ref [:modular]))
          :stop (webly.app.app/stop-webly this)}
    
  :nrepl {:start (nrepl.server/start-server :bind "0.0.0.0" :port 9100)
          :stop (.close this)}

 
;  
  }}